---
- name: Initialize GovTech Network Database
  hosts: localhost
  gather_facts: yes

  vars:
    db_password: "{{ lookup('env', 'DB_PASSWORD') | default('securepassword123', true) }}"
    postgres_db: govtech_network
    postgres_user: admin
    venv_path: "{{ playbook_dir }}/myenv"
    docker_compose_file: "{{ playbook_dir }}/../docker-compose.yml"
    sql_schema_file: "{{ playbook_dir }}/../sql/create_schema.sql"
    sql_init_file: "{{ playbook_dir }}/../sql/empty_init.sql"
    env_file: "{{ playbook_dir }}/../.env"
    ansible_python_interpreter: "{{ venv_path }}/bin/python"

  tasks:
    - name: Create .env file
      ansible.builtin.copy:
        dest: "{{ env_file }}"
        content: |
          DB_PASSWORD={{ db_password }}
          POSTGRES_DB={{ postgres_db }}
          POSTGRES_USER={{ postgres_user }}
        mode: "0600"

    - name: Create virtual environment
      ansible.builtin.command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"

    - name: Install required Python packages
      ansible.builtin.pip:
        name:
          - psycopg2-binary
          - sqlalchemy
        virtualenv: "{{ venv_path }}"
        state: present

    - name: Run docker-compose up
      community.docker.docker_compose_v2:
        project_src: "{{ playbook_dir }}/.."
        files:
          - "{{ docker_compose_file | basename }}"
        state: present
        env_files: "{{ env_file }}"

    - name: Wait for PostgreSQL to be healthy
      community.docker.docker_container_info:
        name: govtech_network_db
      register: result
      until: result.container.State.Health.Status == "healthy"
      retries: 30
      delay: 10

    - name: Read SQL schema script content
      ansible.builtin.slurp:
        src: "{{ sql_schema_file }}"
      register: sql_schema_script

    - name: Create database schema
      community.postgresql.postgresql_query:
        db: "{{ postgres_db }}"
        login_host: localhost
        login_user: "{{ postgres_user }}"
        login_password: "{{ db_password }}"
        query: "{{ sql_schema_script['content'] | b64decode }}"
      register: query_result
      failed_when: false
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Display SQL error if any
      ansible.builtin.debug:
        msg: "SQL Error: {{ query_result.msg }}"
      when: query_result.failed

    - name: Read initial data SQL script content
      ansible.builtin.slurp:
        src: "{{ sql_init_file }}"
      register: init_sql_script

    - name: Create initial data
      community.postgresql.postgresql_query:
        db: "{{ postgres_db }}"
        login_host: localhost
        login_user: "{{ postgres_user }}"
        login_password: "{{ db_password }}"
        query: "{{ init_sql_script['content'] | b64decode }}"
      register: init_query_result
      failed_when: false
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Display SQL error for initial data if any
      ansible.builtin.debug:
        msg: "SQL Error: {{ init_query_result.msg }}"
      when: init_query_result.failed

